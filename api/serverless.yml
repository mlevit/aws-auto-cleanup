service: auto-cleanup-api

custom:
  log_level: INFO # DEBUG for dev | INFO for prod
  region: ${opt:region, "ap-southeast-2"} # AWS deployment region
  apiGatewayCaching:
    enabled: true
  manifest:
    output: ../web/src/serverless.manifest.json
    silent: true
  pythonRequirements:
    layer:
      name: ${self:service}-${self:provider.stage}-requirements
      compatibleRuntimes:
        - python3.9
    noDeploy:
      - boto
      - boto3
      - botocore
    slim: true

provider:
  name: aws
  runtime: python3.9
  stage: ${opt:stage, "prod"} # overwrite via CLI "--stage dev"
  region: ${self:custom.region}
  apiGateway:
    apiKeys:
      - ${self:service}-${self:provider.stage}-api-key
    minimumCompressionSize: 0
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:DeleteItem
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:Scan
          Resource: "*"
        - Effect: Allow
          Action:
            - s3:Get*
            - s3:List*
          Resource: "*"
  tracing:
    apiGateway: true
    lambda: true

package:
  individually: true
  patterns:
    - "!node_modules/**"

functions:
  AllowlistCreate:
    handler: src/allowlist/create.lambda_handler
    name: ${self:service}-${self:provider.stage}-allowlist-create
    description: Create allowlist entry
    memorySize: 128
    timeout: 30
    package:
      patterns:
        - "!**"
        - "src/allowlist/create.py"
    environment:
      LOG_LEVEL: ${self:custom.log_level}
      SETTINGS_TABLE: ${cf:auto-cleanup-app-${self:provider.stage}.SettingsTableName}
      ALLOWLIST_TABLE: ${cf:auto-cleanup-app-${self:provider.stage}.AllowlistTableName}
    layers:
      - Ref: PythonRequirementsLambdaLayer
    events:
      - http:
          method: POST
          path: /allowlist/entry
          cors: true
          private: true
  AllowlistRead:
    handler: src/allowlist/read.lambda_handler
    name: ${self:service}-${self:provider.stage}-allowlist-read
    description: Read allowlist
    memorySize: 512
    timeout: 30
    package:
      patterns:
        - "!**"
        - "src/allowlist/read.py"
    environment:
      LOG_LEVEL: ${self:custom.log_level}
      ALLOWLIST_TABLE: ${cf:auto-cleanup-app-${self:provider.stage}.AllowlistTableName}
    events:
      - http:
          method: GET
          path: /allowlist
          cors: true
          private: true
  AllowlistUpdate:
    handler: src/allowlist/update.lambda_handler
    name: ${self:service}-${self:provider.stage}-allowlist-update
    description: Update allowlist entry
    memorySize: 128
    timeout: 30
    package:
      patterns:
        - "!**"
        - "src/allowlist/update.py"
    layers:
      - Ref: PythonRequirementsLambdaLayer
    environment:
      LOG_LEVEL: ${self:custom.log_level}
      SETTINGS_TABLE: ${cf:auto-cleanup-app-${self:provider.stage}.SettingsTableName}
      ALLOWLIST_TABLE: ${cf:auto-cleanup-app-${self:provider.stage}.AllowlistTableName}
    events:
      - http:
          method: PUT
          path: /allowlist/entry
          cors: true
          private: true
  AllowlistDelete:
    handler: src/allowlist/delete.lambda_handler
    name: ${self:service}-${self:provider.stage}-allowlist-delete
    description: Delete allowlist entry
    memorySize: 128
    timeout: 30
    package:
      patterns:
        - "!**"
        - "src/allowlist/delete.py"
    environment:
      LOG_LEVEL: ${self:custom.log_level}
      ALLOWLIST_TABLE: ${cf:auto-cleanup-app-${self:provider.stage}.AllowlistTableName}
    events:
      - http:
          method: DELETE
          path: /allowlist/entry
          cors: true
          private: true
  ServiceRead:
    handler: src/service/read.lambda_handler
    name: ${self:service}-${self:provider.stage}-service-read
    description: Returns AWS services supported by Auto Cleanup
    memorySize: 512
    timeout: 30
    package:
      patterns:
        - "!**"
        - "src/service/read.py"
    layers:
      - Ref: PythonRequirementsLambdaLayer
    environment:
      LOG_LEVEL: ${self:custom.log_level}
      SETTINGS_TABLE: ${cf:auto-cleanup-app-${self:provider.stage}.SettingsTableName}
    events:
      - http:
          method: GET
          path: /settings/service
          cors: true
          private: true
  ExecutionLogList:
    handler: src/execution_log/list.lambda_handler
    name: ${self:service}-${self:provider.stage}-execution-log-list
    description: Returns execution logs
    memorySize: 512
    timeout: 30
    package:
      patterns:
        - "!**"
        - "src/execution_log/list.py"
    environment:
      LOG_LEVEL: ${self:custom.log_level}
      EXECUTION_LOG_BUCKET: ${cf:auto-cleanup-app-${self:provider.stage}.ExecutionLogBucketName}
    events:
      - http:
          method: GET
          path: /execution
          cors: true
          private: true
  ExecutionLogRead:
    handler: src/execution_log/read.lambda_handler
    name: ${self:service}-${self:provider.stage}-execution-log-read
    description: Returns execution logs
    memorySize: 2048
    timeout: 30
    package:
      patterns:
        - "!**"
        - "src/execution_log/read.py"
    environment:
      LOG_LEVEL: ${self:custom.log_level}
      EXECUTION_LOG_BUCKET: ${cf:auto-cleanup-app-${self:provider.stage}.ExecutionLogBucketName}
    events:
      - http:
          method: GET
          path: /execution/{key}
          cors: true
          private: true
          caching:
            enabled: true
            cacheKeyParameters:
              - name: request.path.key

resources:
  Outputs:
    AccountID:
      Value: !Ref AWS::AccountId

plugins:
  - serverless-api-gateway-caching
  - serverless-manifest-plugin
  - serverless-python-requirements
